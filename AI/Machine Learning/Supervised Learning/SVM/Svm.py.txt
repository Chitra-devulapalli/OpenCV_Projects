import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from matplotlib.colors import ListedColormap
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve

dataset = pd.read_csv(r'datasets_222487_478477_framingham.csv')
#Removing Null Values
dataset.isnull().any()
dataset = dataset.fillna(method='ffill')

#Declaring Attributes
X = dataset.iloc[:, [4,14]].values
y = dataset.iloc[:, -1].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

#Scaling
classifier = StandardScaler()
X_train = classifier.fit_transform(X_train)
X_test = classifier.transform(X_test)

# TRAINING AND PREDICTION
for type in ('sigmoid','poly','rbf'):
    svclassifier = SVC(kernel=type, random_state=0)
    svclassifier.fit(X_train, y_train)
    y_pred = svclassifier.predict(X_test)

    for i, j in enumerate(np.unique(y_test)):
        plt.scatter(X_test[y_test == j, 0], X_test[y_test == j, 1],
                    color=ListedColormap(('red', 'green'))(i), label=j, s=20)

    #plotting contour
    X_Set, Y_Set = X_test, y_test
    X1, X2 = np.meshgrid(np.arange(start=X_Set[:, 0].min() - 1, stop=X_Set[:, 0].max() + 1, step=0.01),
                         np.arange(start=X_Set[:, 1].min() - 1, stop=X_Set[:, 1].max() + 1, step=0.01))
    plt.contourf(X1, X2, svclassifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
                 alpha=0.75, cmap=ListedColormap(('red', 'green')))
    plt.xlim(X1.min(), X1.max())
    plt.ylim(X2.min(), X2.max())

    #Vectors
    plt.scatter(svclassifier.support_vectors_[:, 0], svclassifier.support_vectors_[:, 1], s=20,
               linewidth=1, facecolors='none', edgecolors='k')

    plt.title('Support Vector Machine - %s' % type)
    plt.xlabel('Scaled Factors')
    plt.ylabel('Heart Disease Estimate')
    plt.legend()
    plt.show()

    # Accuracy
    print('Accuracy: {:.2f}'.format(svclassifier.score(X_test, y_test)))

    # Model Characteristics

    confusion_mat = confusion_matrix(y_test, y_pred)
    print('Confusion Matrix:\n', confusion_mat)
    print('Classification Report\n', classification_report(y_test, y_pred))